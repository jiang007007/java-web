ServletConfig:这个对象可以读取web.xml中配置的初始化参数不写硬编码 将配置写在配置文件中
ServletContext: 这个对象是在Tomcat启动的时候就会创建,代表整个应用
    我们一般用来获取整个应用的配置信息还可以用这个对象来读取资源文件.
  1 ServletConfig是单个的,而ServletContext是整个应用的
 Servlet的细节:
    1. Servlet是单例的
    2. 配置通配符的时候可以用各种的通配符*.和一个Servlet可以被多个配置映射
    3. 访问任何资源其实都是访问Servlet

 Servlet的重点:
     1 request 和 response对象.
        request就是封装了Http请求头
        response就是封装了HTTP响应头
   Servlet的头信息:
     1.Config(获取配置信息) Context(代表整个Web应用) Request(Http请求) Response(HTTP响应)
 Cookie 和session会话机制

    Cookie是检查用户身上的"通行证"来确认用户的身份,Session就是通过检查服务器上"客户明细表"
    来确认用户的身份的.Session相当于在服务器中建立了一份 "客户明细表"


 JSP:Java Servlet Pages java服务器页面
    特点: HTML和Java代码共同存在,JSP就是替代Servlet输出HTML的.
    为啥JSP是一种Servlet???
      在第一次被访问的时候回被编译为HttpJspPage类(该类是HttpServlet的一个子类)
     e.g: 1.jsp
       浏览器第一次请求1.jsp时,Tomcat会将1.jsp转化为1_jsp.java这么一个类,并
       将该文件编译成class文件.编译完毕后再运行class文件来响应浏览器的请求.
    JSP内置了9个对象:
     out  session response request   config page application  pageContext exception
    使用:
        在Servlet处理好的数据,转发到JSP JSP只管对小部分的数据处理以及JSP本身写好的页面
     JSTL和EL表达式
        EL表达式用${}括起来的脚本,用来更方便的读取对象

  List集合:
    ArrayList(数组)和 LinkedList(链表)
    遍历数组速度快
    增删元素快
  Set集合
    HashSet(*)  TreeSet  LinkedHashSet
  Map
    HashMap  LinkedHashMap  TreeMap
  Queue队列

  JDBC:
    Connection  Statement  Result
    链接数据库:
     1 导入驱动
     2 装装载数据库驱动程序
     3 获取到与数据库链接
     4  获取可以执行SQL语句的对象
     5 执行SQL
     6 关闭链接
    重点 PreparedStatement接口与Statement接口
     1 PreparedStatement对象
      在编译SQL语句时,如果sql语句有变量,就需要使用分割符来隔开.
      PreparedStatement可以使用占位符,简化sql的编写
     2 Statement会频繁编译sql.
     PreparedStatement可以对sql进行预编译,提高效率,预编译的sql存储在PreparedStatement对象中
     3 PreparedStatement防止sql注入.(Statement通过分隔符'++',编写永等)
泛型:
    只要在编译期间没有出现警告,那么运行期间就不会出现ClassCastException异常
 参数类型
    把类型当作是参数一样传递
    <数据类型> 只能是引用类型
   为啥需要泛型????
     类型转化相对安全
     代码更加简洁[不用强制类型转化]
     程序更加健壮[只要编译时期没有警告,那么运行时期就不会出ClassCastException异常]
     可读性和稳定性[在编写集合的时候,就限定了类型]
   有了泛型之后可以使用增强for遍历了

  泛型基础:
    泛型类就是把泛型定义在类上,用户使用该类的时候,才把类明确下来
    泛型方法 :  泛型是先定义后使用的
    泛型变量:只对非静态成员有效
    泛型类派生出的子类
      它是怎么被继承的???
       1 子类明确泛型类的类型参数变量
       2 子类不能明确泛型的类型参数变量
   ***:
     泛型中的<Object>并没有继承关系  =>List<Object> 与List<String> 是毫无关系
     =>java 泛型提供了类型通配符  ?(匹配任意类型)
     在使用? 通配符时候注意: 就是只能调用对象与类型无关的方法,
     不能调用对象与类型有关的方法.
   设定通配符上线<? extends Number>
        装载的元素只能是Number的子类or自身
   设置通配符下线<? super Type>
     ****无论是设定通配符上限还是下限,都不是操作对象有关的方法
  使用原则:
    如果参数之间的类型有依赖关系,or返回值与参数之间有依赖关系的=>泛型方法
    没有依赖关系 =>通配符'

    堆污染: 把一个不是泛型的集合赋值给一个带泛型的集合

    注解的作用就是给类  方法注入信息.
    利用反射技术获取注解信息
        1 反射出该类的方法
        2 通过方法得到注解上具体的信息
        3 将注解上的信息注入到方法上
      反射主要原因
        1. 提高程序的灵活性
        2. 屏蔽掉实现的细节,让使用者更加方便好用.


   Object:
    1. hashCode:
         以散列表为底层带来性能的提升
    重写equals就要重写hashCode
    2. clone克隆
       一般想要克隆出的对象是独立的(与原有对象是分开的)
       深拷贝指该对象的成员变量都该应克隆一份
       浅拷贝指成员变量没有被克隆一份
      克隆的对象要实现Cloneable接口
      重写clone方法

    3 wait方法
      wait和notify方法其实就是Java给我们提供让线程之间通信的API
      线程进入wait方法":会处于等待状态,直到调用唤醒方法or指定的时间已过(释放锁)
        (释放锁) 只会释放当前调用wait方法的对象的锁,而当前线程的其他对象是不会解锁
      结束等待状态的因素:
       1 notify 2 notifyAll 3 interrupt 4 时间到了
       5 虚唤醒
          synchronized(obj){
            while(){
                obj.wait(timeout);
            }
          }

    4 notify方法:
        唤醒正在等待的对象,是随机唤醒的(可能有多个等待对象)
        3中方式成为监听器对象的所有者:
         1 调用该实例的同步方法
         2 执行该对象的同步方法
         3 执行该对象对应的静态代码块
      一次只有一个线程获取监听器对象
      需要注意的: notify方法调用后,被唤醒的线程不会立即获取锁对象.
      而是等待notify的synchronized
    fork():
        新的进程要通过老的进程复制自身得到
    exec函数:
        执行时会直接替换掉当前进程的空间(原来的数据会被清空)
    Copy On Write 原理:
        1 fork创建出的子进程,与父进程共享内存空间.=>两个进程使用的是相同的物理空间
        (子进程的代码段  数据段  堆栈都是指向父进程的物理空间)
         当父子进程中有更相应的行为发生时,在为子进程相应的段分配物理空间(代码段共享父进程的物理空间)
        2 exec之后 子进程也会分配单独的物理空间
     Linux COW:
        fork()之后,Kernel把父进程中所有的内存的权限都设置为read-only,然后子进程的地址空间
       指定向父进程.当父子进程都只读内存时,相安无事.当其中某个进程写内存时,CPU硬件检测到内存也是
       read-only的,于是触发页异常中断(page-fault).陷入kernel的一个中断例程.中断例程中,kernel
       就会把触发的异常的页复制一份,于是父子进程自持有独立的一份

       优点:
         减少分配和复制大量资源时带来的瞬时延时
         减少不必要的资源分配.e.g: fork进程时  并不是所有的页面都需要复制,父进程的代码段和
        只读数据段都不允许修改  所有无需复制
       缺点:
         fork之后,父子进程都还需要继续进行写操作,那么会产生大量的分页错误
      Redis持久化
          1 采用BGSAVE命令 or BGREWRITEAOF的方式,那么Redis会fork出一个子进程来读取数据,从而写到
         磁盘中.
          2 在rehash阶段上,写操作是无法避免的,所以Redis在fork出子进程之后,将负载因子阈值提高,尽量减少些操作.
         避免不必要的内存写入操作,最大限度地节约内存
      文件系统COW:


 限流:
    漏桶和令牌的区别:

    1 漏桶两种实现:
       1 不允许突发流量的情况:
            桶子100L 流出速度10L 突然来100L 只让进10L 其他都限流
       2 允许一定的突发流量:
           桶子100L 现在是空的,那么100L的水都能瞬间进我的桶子.再以10L/s的速度将这些水流出.
          在来100L水 只能限流
    2 令牌桶:
        1 桶子是来装令牌的:
          原理 每个请求进来  就会去桶子拿一个令牌
          假设  有1001个请求,就要去令牌桶拿1001个令牌
          1.1: 桶子只有1000个,那么没有拿到令牌的请求只能被阻塞(等待)
          1.2:  桶子有1001个,所有请求都可以执行
      限流框架 guava
 Synchronized一般用来修饰三种东西:
    修饰普通方法:
       对象锁
    修饰代码块:
      对象锁
    修饰静态方法:
        获取的是类锁(类的字节码文件对象)
    获取了类锁的线程和获取了对象锁的线程是不冲突的
